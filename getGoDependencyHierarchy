#!/usr/bin/env bash
#=========================================================================================
# Created by: Izhak Jakov
# Date: November 2021
# A utility for getting the dependencies of a specific package in a Go module
#=========================================================================================
# Example:
# Looking for "github.com/spf13/cobra" with tag v1.1.1 in "github.com/grokify/go-aha"
# The modules on the left column are using the modules on the right column
#-----------------------------------------------------------------------------------------
#  $ git clone 'https://github.com/grokify/go-aha.git'
# 
#  $ cd go-aha
# 
#  $ getGoDependencyHierarchy 'github.com/spf13/cobra@v1.1.1'
#            github.com/grokify/go-aha
#                       ⬇
#       github.com/grokify/gocharts@v1.16.8
#                       ⬇
#      github.com/blend/go-sdk@v1.20211204.3
#                       ⬇
#          github.com/spf13/cobra@v1.1.1
#=========================================================================================

[ "${#}" -eq 0 ] && {
	echo "Usage: $(basename "${0}") <module>[@<revision>]"
	exit
}
[ "${#}" -ne 1 ] && {
	echo 'ERROR: Illegal number of parameters'
	echo "Usage: $(basename "${0}") <module>[@<revision>]"
	exit 1
}

function printDependencies() {
	local grepOut module
	grepOut="$(echo "${modGraphOut}" |grep "\<${1}\>" |grep -v "^${1}" |head -1)"
	module="$(echo "${grepOut}" |sed -e 's [[:space:]].*$  g')"
	[ ${module}"" == '' ] && return
	[ ${#module} -gt ${maxWidth} ] && maxWidth=${#module}
	printDependencies "${module}"
	width=$(( ( ( ${maxWidth} - ${#module} ) / 2 ) + 2 + ${#module}))
	printf "%+${width}s\n" "${module}"
	width=$(( ( ${maxWidth} / 2 ) + 4 ))
	printf "%+${width}s\n" '⬇'
}

modGraphOut="$(go mod graph)"
grepOut="$(echo "${modGraphOut}" |grep "\<${1}\>" |grep -v "^${1}")"
module="$(echo "${grepOut}" |sed -e 's ^.*[[:space:]]  g' |sort -u)"
numOfDepsFound=$(echo -n ${module} |wc -w)
[ ${numOfDepsFound} -eq 0 ] && {
	echo "\"${1}\" is not a dependency of this package."
	exit 2
}
[ ${numOfDepsFound} -gt 1 ] && {
	echo "Multiple revisions of \"${1}\" have been found in this package."
	echo 'Please append a revision and try again:'
	echo "${module}" |sed -e 's/^[[:space:]]*/ -> /'
	echo "Usage: $(basename "${0}") '${1}@<revision>'"
	exit 3
}

maxWidth=${#module}
printDependencies "${module}"
width=$(( ( ( ${maxWidth} - ${#module} ) / 2 ) + 2 + ${#module}))
printf "%+${width}s\n" "${module}"
